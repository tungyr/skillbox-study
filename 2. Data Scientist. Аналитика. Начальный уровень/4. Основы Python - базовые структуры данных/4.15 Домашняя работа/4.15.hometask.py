# 4.15 Skillbox hometask

# Индексация списка

L = [
    [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    ],
    [
        [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    ],
    [
        [41, 42, 43, 44, 45],
        [46, [47, 48], 49, 50],
        [51, 52, 53, 54, 55],
        [56, 57, 58, 59, 60]
    ],
    [61, 62, 63,
     [64, 65, 66, 67, 68, 69, 70, 71],
     72, 73, 74,
     [75,
      [76, 77, 78],
      79],
     80],
    [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
]

# 1. Из приведенного выше списка списков выведите с помощью индексов число 7.
# print(L[0][0][6])

# 2. Из приведенного выше списка списков выведите с помощью индексов число 49.
# print(L[2][1][2])

# 3. Из приведенного выше списка списков выведите с помощью индексов число 78.
# print(L[3][7][1][2])

# 4. Из приведенного выше списка списков выведите с помощью индексов (используя отрицательные значения) число 99.
# print(L[4][-2])

# 5. Из приведенного выше списка списков сделайте срез с числом 74.
# print(L[3][6:7])

# 6. Из приведенного выше списка списков сделайте срез с числами 47, 48.
# print(L[2][1][1:2])

# 7. Из приведенного выше списка списков сделайте срез с числами 77, 78.
# print(L[3][7][1][1:])

# Функция range()
# 8. С помощью функции range сгенерируйте следующую последовательность:
# [0, 1, 2, 3, 4]:
# list(range(5))
#
# 9. С помощью функции range сгенерируйте следующую последовательность:
# [3, 4]:
# list(range(3,5))
#
# 10. С помощью функции range сгенерируйте следующую последовательность:
# [4, 8, 12, 16]:
# list(range(4, 20, 4))
#
# 11. С помощью функции range сгенерируйте следующую последовательность:
# [16, 12, 8, 4]:
# list(range(16, 0, -4))
#
# 12. С помощью функции range сгенерируйте следующую последовательность:
# [0, 5, 10]:
# list(range(0,15,5))
#
# 13. С помощью функции range сгенерируйте следующую последовательность:
# [10, 5, 0]:
# list(range(10, -5, -5))
#
# 14. С помощью функции range сгенерируйте следующую последовательность:
# [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]:
# list(range(-10, 0, 1))
#
# 15. С помощью функции range сгенерируйте следующую последовательность:
# [-10, -16, -22, -28, -34]:
# list(range(-10, -40, -6))

# Операторы и типы данных
#
# Этот блок должен быть решен БЕЗ использования готовых функций и сторонних библиотек. Используйте операторы.

'''16. Часы показывают время в формате h:mm:ss (количество часов (от 0 до 23), двузначное количество минут, двузначное количество секунд). Количество минут и секунд при необходимости дополняются до двузначного числа нулями.
Программа должна запрашивать количество секунд S, которое прошло с начала суток, и выводить в формате h:mm:ss, какое время будут показывать часы.

Формат ввода:
3600

Формат вывода:
1:00:00

'''


# def watch_time():
    # мое первоначальное решение
#     seconds = int(input('Input seconds quantity: '))
#     hours = seconds // 3600
#     minutes = (seconds % (hours * 3600)) // 60
#     sec = (seconds % 60)
#
#     if minutes < 10:
#         minutes = '0' + str(minutes)
#
#     if sec < 10:
#         sec = '0' + str(sec)
#
#     print(hours, ':',  minutes, ':',  sec)
#
# watch_time()

# S = int(input('Введите секунды:'))
# #  подсказанное решение преподавателя
# hours = S // 3600 % 24
# print(hours)
# minutes = (S % 3600) // 60
# print(minutes)
# seconds = (S % 3600) % 60
# print(seconds)
# print(f'{hours}:{minutes // 10}{minutes % 10}:{seconds // 10}{seconds % 10}')


'''
17. Машина выезжает на нулевой километр МКАД и едет по часовой стрелке с постоянной скоростью V километров в час. 
На каком километре МКАД машина окажется через T часов?
Длина МКАД: 109 км.

Формат ввода:
60
1

Формат вывода:
60

'''


def mkad_km():
    velocity = int(input('Velocity: '))
    time_movement = int(input('Hours: '))
    km = (velocity * time_movement) % 109
    print(km)

# mkad_km()


'''
18.Напишите программу, которая запрашивает целое пятизначное число и выводит сумму его цифр.

Формат ввода:
11111

Формат вывода:
5

'''


def figures_summ():
    figure = input('Input digits: ')
    figure_summ = 0
    for i in range(len(figure)):
        figure_summ = figure_summ + int(figure[i])
    print(figure_summ)

# figures_summ()

'''
19.Напишите программу, которая запрашивает целое четырехзначное число и меняет местами его две первые и две последние цифры.

Формат ввода:
5236

Формат вывода:
3652

'''


def digit_swap():
    digits = input('Input digits: ')
    result = digits[2:] + digits[0:2]
    print(result)

# digit_swap()


'''
20. Напишите программу, которая на основании параметра D (сколько километров в день преодолевает машина), расчитывает сколько дней она затратит на путь длиной P километров.

Формат ввода:
105
120

Формат вывода:
2

'''

'''
    советы с телеги:
    days = math.ceil(distance / km_per_day)
    distance // km_per_day + bool(distance % km_per_day)
    bool - возвращает True или 1 если остаток от деления != 0
    В смысле т.к.в питоне bool унаследован от int, и True имеет целочисленное прдеставление 1, а False 0, 
    то при сложении получим + 1 или + 0
'''


def days_for_dist(km_per_day):
    # km_per_day = int(input('Km by car D: '))
    # distance = int(input('Distance to go P: '))
    distance = 120
    days = distance // km_per_day + bool(distance % km_per_day)
    # days_raw = days
    # days = round(days)
    # days_str = days[0]
    # print(days_raw, days)
    # print(days)
    return days

# def days_for_dist():
    # мое первоначальное решение
    # km_per_day = int(input('Km by car D: '))
    # distance = int(input('Distance to go P: '))
    # days = (distance / km_per_day) + 1 * ((distance - 1) // km_per_day)
    # # days_raw = days
    # days = round(days)
    # # days_str = days[0]
    # # print(days_raw, days)
    # print(days)


# def days_for_dist(km_per_day):
    # решение после подсказки преподавателя
    # km_per_day = int(input('Km by car D: '))
    # distance = int(input('Distance to go P: ))
    # km_per_day = 105
#     distance = 120
#     days = distance // km_per_day
#     print(days)
#
#
for i in range(5, 250, 5):
    result = days_for_dist(i)
    print('120 / ', i, ' =', result)

# days_for_dist()

# D_km_car = list(range(5, 220, 1))
#
# for d in D_km_car:
#     result = days_for_dist(d)105

#     print(d, ':', result, '; ')


'''
21. Напишите программу, которая считает, сколько рублей и копеек нужно заплатить за N авокадо, если один авокадо стоит R рублей и K копеек.

Формат ввода:
40 20
5
Формат вывода:
201 руб. 00 коп.

'''


def avocado_price():
    price = input('Price: ')
    avocado_n = int(input('Quantity: '))
    price = price.split()
    rubles_r = int(price[0])
    kopeek_k = int(price[1])
    kopeek_total = (rubles_r * 100 + kopeek_k) * avocado_n
    rubles_price = kopeek_total // 100
    kopeek_price = kopeek_total - rubles_price * 100

    print(rubles_price, 'руб.', f'{kopeek_price // 10}{kopeek_price % 10}', 'коп.')

avocado_price()


'''
22.
Пусть организаторы мероприятия неправильно составили гугл-форму и просили людей указывать ФИО в неправильном порядке. 
Сначала спрашивали имя, потом отчество, затем фамилию. Напишите программу, которая будет переставлять ФИО в нужный порядок.

Формат ввода:
Иван Иванович Иванов

Формат вывода:
Иванов Иван Иванович

'''


def name_correction():
    name = input('Name: ')
    name = name.split()
    name[1], name[2] = name[2], name[1]
    name[0], name[1] = name[1], name[0]
    print('{0} {1} {2}'.format(*name))

# name_correction()


'''
23. У вас есть список с заказом в ресторане. Напишите программу, которая меняет указанное по названию блюдо на другое. 
При этом новое блюдо в списке будет расположено на месте того, что было заменено.

Формат ввода:
белое вино
красное вино

Формат вывода:
['красное вино', 'салат Цезарь', 'паста Карбонара', 'чизкейк', 'шоколадный сорбет']

'''

order = ['белое вино', 'салат Цезарь', 'паста Карбонара', 'чизкейк', 'шоколадный сорбет']

def order_amend():
    # Replace item in order by new one
    initial_item = input('')
    new_item = input('')
    order[order.index(initial_item)] = new_item
    print(order)

# order_amend()


# ''' Вам дан словарь c расписанием на неделю

diary = {'понедельник': {
                          'утро': ['погулять с собакой'],
                          'день': [],
                          'вечер': ['погулять с собакой']
                                      },
        'вторник': {
                          'утро': ['погулять с собакой'],
                          'день': [],
                          'вечер': ['погулять с собакой']
                                      },
        'среда': {
                          'утро': ['погулять с собакой'],
                          'день': [],
                          'вечер': ['погулять с собакой']
                                      },
        'четверг': {
                          'утро': ['погулять с собакой'],
                          'день': [],
                          'вечер': ['погулять с собакой']
                                      },
        'пятница': {
                          'утро': ['заехать в шиномонтаж', 'помыть машину'],
                          'день': [],
                          'вечер': ['поход в театр',  'ужин в кафе']
                                      },
        'суббота': {
                          'утро': [],
                          'день': [],
                          'вечер': []
                                      },
        'воскресенье': {
                          'утро': [],
                          'день': [],
                          'вечер': []
                                      }}
'''24.
Удалите ключи суббота и воскресенье. Вместо них добавьте пару, где ключ это кортеж суббота, воскресенье, 
а значение – список с делом посадить цветы на даче. Можно ли сделать ключ суббота, воскресенье списком?'''

# del diary['суббота']
# del diary['воскресенье']
# diary[('суббота', 'воскресенье')] = ['посадить цветы на даче']
# print("diary[('суббота', 'воскресенье')]: ", diary[('суббота', 'воскресенье')])
#
# try:
#     diary[['суббота', 'воскресенье']] = ['посадить цветы на даче']
# except TypeError:
#     print('This cannot be done because lists can\'t be hashed!')

'''25.
Добавьте в список дел во вторник утром поход к зубному.'''

# diary['вторник']['утро'].append('поход к зубному')
# print(diary['вторник']['утро'])

'''26.
Замените поход в театр на поход в кино в списке дел в пятницу вечером.'''

# diary['пятница']['вечер'][0] = 'поход в кино'
# print(diary['пятница']['вечер'])

'''27.
Ваш друг вернется из отпуска на один день раньше, поэтому он заберет свою собаку в среду, а не в четверг. Удалите дело 
погулять с собакой из соответствующих списков.'''

# diary['среда']['утро'].remove('погулять с собакой')
# diary['среда']['вечер'].remove('погулять с собакой')
# diary['четверг']['утро'].remove('погулять с собакой')
# diary['четверг']['вечер'].remove('погулять с собакой')
# print('среда: ', diary['среда'], '\n', 'четверг: ', diary['четверг'])

'''28.
Выведите второе дело из списка дел, которые вам нужно сделать в пятницу утром.'''

# print(diary['пятница']['утро'][1])

# [print(i) for i in diary.items()]



